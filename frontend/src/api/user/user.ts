/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * DH - Piskotki
 * API for DH - Piskotki
 * OpenAPI spec version: 1.0
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  User,
  UpdateUserDto
} from '.././model'
import { customInstance } from '.././mutator/custom-instance'
import type { ErrorType } from '.././mutator/custom-instance'

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Returns all users in the DB
 */
export const userControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<User[]>(
      {url: `/api/user`, method: 'get', signal
    },
      options);
    }
  

export const getUserControllerFindAllQueryKey = () => [`/api/user`];

    
export type UserControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof userControllerFindAll>>>
export type UserControllerFindAllQueryError = ErrorType<unknown>

export const useUserControllerFindAll = <TData = Awaited<ReturnType<typeof userControllerFindAll>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof userControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserControllerFindAllQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userControllerFindAll>>> = ({ signal }) => userControllerFindAll(requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof userControllerFindAll>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * @summary Returns the user with ID
 */
export const userControllerFindOne = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<User>(
      {url: `/api/user/${id}`, method: 'get', signal
    },
      options);
    }
  

export const getUserControllerFindOneQueryKey = (id: string,) => [`/api/user/${id}`];

    
export type UserControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof userControllerFindOne>>>
export type UserControllerFindOneQueryError = ErrorType<void>

export const useUserControllerFindOne = <TData = Awaited<ReturnType<typeof userControllerFindOne>>, TError = ErrorType<void>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof userControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserControllerFindOneQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userControllerFindOne>>> = ({ signal }) => userControllerFindOne(id, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof userControllerFindOne>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * @summary Not implemented
 */
export const userControllerUpdate = (
    id: string,
    updateUserDto: UpdateUserDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<string>(
      {url: `/api/user/${id}`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: updateUserDto
    },
      options);
    }
  


    export type UserControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof userControllerUpdate>>>
    export type UserControllerUpdateMutationBody = UpdateUserDto
    export type UserControllerUpdateMutationError = ErrorType<unknown>

    export const useUserControllerUpdate = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userControllerUpdate>>, TError,{id: string;data: UpdateUserDto}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userControllerUpdate>>, {id: string;data: UpdateUserDto}> = (props) => {
          const {id,data} = props ?? {};

          return  userControllerUpdate(id,data,requestOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userControllerUpdate>>, TError, {id: string;data: UpdateUserDto}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @summary Not implemented
 */
export const userControllerRemove = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<string>(
      {url: `/api/user/${id}`, method: 'delete'
    },
      options);
    }
  


    export type UserControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof userControllerRemove>>>
    
    export type UserControllerRemoveMutationError = ErrorType<unknown>

    export const useUserControllerRemove = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof userControllerRemove>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof userControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  userControllerRemove(id,requestOptions)
        }

      return useMutation<Awaited<ReturnType<typeof userControllerRemove>>, TError, {id: string}, TContext>(mutationFn, mutationOptions)
    }
    