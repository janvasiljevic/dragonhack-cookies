/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * DH - Piskotki
 * API for DH - Piskotki
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  Book
} from '.././model'
import { customInstance } from '.././mutator/custom-instance'
import type { ErrorType } from '.././mutator/custom-instance'

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Returns all recomendations for the user based on his liked books
 */
export const recomendationsControllerGetRecomendations = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<Book[]>(
      {url: `/api/recomendations`, method: 'get', signal
    },
      options);
    }
  

export const getRecomendationsControllerGetRecomendationsQueryKey = () => [`/api/recomendations`];

    
export type RecomendationsControllerGetRecomendationsQueryResult = NonNullable<Awaited<ReturnType<typeof recomendationsControllerGetRecomendations>>>
export type RecomendationsControllerGetRecomendationsQueryError = ErrorType<unknown>

export const useRecomendationsControllerGetRecomendations = <TData = Awaited<ReturnType<typeof recomendationsControllerGetRecomendations>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof recomendationsControllerGetRecomendations>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRecomendationsControllerGetRecomendationsQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof recomendationsControllerGetRecomendations>>> = ({ signal }) => recomendationsControllerGetRecomendations(requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof recomendationsControllerGetRecomendations>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

