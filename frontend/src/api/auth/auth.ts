/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * DH - Piskotki
 * API for DH - Piskotki
 * OpenAPI spec version: 1.0
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  User,
  LoginUserLocalDto,
  AuthControllerRegister201,
  RegisterUserDto
} from '.././model'
import { customInstance } from '.././mutator/custom-instance'
import type { ErrorType } from '.././mutator/custom-instance'

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Login a user
 */
export const authControllerLogin = (
    loginUserLocalDto: LoginUserLocalDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<User>(
      {url: `/api/auth/login`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: loginUserLocalDto
    },
      options);
    }
  


    export type AuthControllerLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerLogin>>>
    export type AuthControllerLoginMutationBody = LoginUserLocalDto
    export type AuthControllerLoginMutationError = ErrorType<unknown>

    export const useAuthControllerLogin = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginUserLocalDto}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerLogin>>, {data: LoginUserLocalDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerLogin(data,requestOptions)
        }

      return useMutation<Awaited<ReturnType<typeof authControllerLogin>>, TError, {data: LoginUserLocalDto}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @summary Register a new user
 */
export const authControllerRegister = (
    registerUserDto: RegisterUserDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<User | AuthControllerRegister201>(
      {url: `/api/auth/register`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: registerUserDto
    },
      options);
    }
  


    export type AuthControllerRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerRegister>>>
    export type AuthControllerRegisterMutationBody = RegisterUserDto
    export type AuthControllerRegisterMutationError = ErrorType<unknown>

    export const useAuthControllerRegister = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: RegisterUserDto}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerRegister>>, {data: RegisterUserDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerRegister(data,requestOptions)
        }

      return useMutation<Awaited<ReturnType<typeof authControllerRegister>>, TError, {data: RegisterUserDto}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @summary Logout a user
 */
export const authControllerLogout = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/api/auth/logout`, method: 'put'
    },
      options);
    }
  


    export type AuthControllerLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerLogout>>>
    
    export type AuthControllerLogoutMutationError = ErrorType<unknown>

    export const useAuthControllerLogout = <TError = ErrorType<unknown>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogout>>, TError,TVariables, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerLogout>>, TVariables> = () => {
          

          return  authControllerLogout(requestOptions)
        }

      return useMutation<Awaited<ReturnType<typeof authControllerLogout>>, TError, TVariables, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @summary Get the profile of a user
 */
export const authControllerProfile = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<User>(
      {url: `/api/auth/profile`, method: 'get', signal
    },
      options);
    }
  

export const getAuthControllerProfileQueryKey = () => [`/api/auth/profile`];

    
export type AuthControllerProfileQueryResult = NonNullable<Awaited<ReturnType<typeof authControllerProfile>>>
export type AuthControllerProfileQueryError = ErrorType<unknown>

export const useAuthControllerProfile = <TData = Awaited<ReturnType<typeof authControllerProfile>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof authControllerProfile>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthControllerProfileQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof authControllerProfile>>> = ({ signal }) => authControllerProfile(requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof authControllerProfile>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

