/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * DH - Piskotki
 * API for DH - Piskotki
 * OpenAPI spec version: 1.0
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  User,
  FriendsControllerSearchParams
} from '.././model'
import { customInstance } from '.././mutator/custom-instance'
import type { ErrorType } from '.././mutator/custom-instance'

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Create a new friendship
 */
export const friendsControllerCreate = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/api/friends/${id}`, method: 'post'
    },
      options);
    }
  


    export type FriendsControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof friendsControllerCreate>>>
    
    export type FriendsControllerCreateMutationError = ErrorType<unknown>

    export const useFriendsControllerCreate = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof friendsControllerCreate>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof friendsControllerCreate>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  friendsControllerCreate(id,requestOptions)
        }

      return useMutation<Awaited<ReturnType<typeof friendsControllerCreate>>, TError, {id: string}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * @summary Delete a friendship
 */
export const friendsControllerDelete = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/api/friends/${id}`, method: 'delete'
    },
      options);
    }
  


    export type FriendsControllerDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof friendsControllerDelete>>>
    
    export type FriendsControllerDeleteMutationError = ErrorType<unknown>

    export const useFriendsControllerDelete = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof friendsControllerDelete>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof friendsControllerDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  friendsControllerDelete(id,requestOptions)
        }

      return useMutation<Awaited<ReturnType<typeof friendsControllerDelete>>, TError, {id: string}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Search for new friends. Excludes already made friends
 * @summary Search for new friends
 */
export const friendsControllerSearch = (
    params: FriendsControllerSearchParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<User[]>(
      {url: `/api/friends`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getFriendsControllerSearchQueryKey = (params: FriendsControllerSearchParams,) => [`/api/friends`, ...(params ? [params]: [])];

    
export type FriendsControllerSearchQueryResult = NonNullable<Awaited<ReturnType<typeof friendsControllerSearch>>>
export type FriendsControllerSearchQueryError = ErrorType<unknown>

export const useFriendsControllerSearch = <TData = Awaited<ReturnType<typeof friendsControllerSearch>>, TError = ErrorType<unknown>>(
 params: FriendsControllerSearchParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof friendsControllerSearch>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFriendsControllerSearchQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof friendsControllerSearch>>> = ({ signal }) => friendsControllerSearch(params, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof friendsControllerSearch>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

